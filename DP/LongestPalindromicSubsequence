class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        return max(self.helper(s, 0, len(s) - 1, {}), 1)

    def helper(self, s, i, j, dp):
        if i >= j - 1:
            if s[i] == s[j]:
                return j - i + 1
            return 0

        if i > j:
            return 0

        key = str(i) + ':' + str(j)

        if key in dp:
            return dp[key]

        if s[i] == s[j]:
            dp[key] = self.helper(s, i + 1, j - 1, dp) + 2
            return dp[key]

        a = self.helper(s, i + 1, j, dp)
        b = self.helper(s, i, j - 1, dp)
        dp[key] = max(self.helper(s, i + 1, j, dp), self.helper(s, i, j - 1, dp))
        return dp[key]

    def longestPalindromeSubseq_bottom_up(self, s: str) -> int:
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        dp[0][0] = 1

        for r in range(1, n):
            dp[r][r] = 1
            for l in range(r-1, -1, -1):
                if s[l] == s[r]:
                    dp[l][r] = dp[l + 1][r - 1] + 2
                else:
                    dp[l][r] = max(dp[l + 1][r], dp[l][r - 1])

        return dp[0][-1]

s = Solution()
strr = "abbd"
print(s.longestPalindromeSubseq_bottom_up(strr))